// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	fuel "go-skeleton-code/internal/app/domains/master/fuel"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, payload
func (_m *Repository) Create(ctx context.Context, payload fuel.Fuel) (fuel.Fuel, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 fuel.Fuel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, fuel.Fuel) (fuel.Fuel, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, fuel.Fuel) fuel.Fuel); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(fuel.Fuel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, fuel.Fuel) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Detail provides a mock function with given fields: ctx, req
func (_m *Repository) Detail(ctx context.Context, req fuel.GetRequest) (fuel.Fuel, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Detail")
	}

	var r0 fuel.Fuel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, fuel.GetRequest) (fuel.Fuel, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, fuel.GetRequest) fuel.Fuel); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(fuel.Fuel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, fuel.GetRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, req
func (_m *Repository) List(ctx context.Context, req fuel.GetRequest) ([]fuel.Fuel, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []fuel.Fuel
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, fuel.GetRequest) ([]fuel.Fuel, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, fuel.GetRequest) []fuel.Fuel); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fuel.Fuel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, fuel.GetRequest) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, fuel.GetRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, payload
func (_m *Repository) Update(ctx context.Context, payload fuel.Fuel) error {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, fuel.Fuel) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
