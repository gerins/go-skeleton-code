// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	schedule "go-skeleton-code/pkg/schedule"

	mock "github.com/stretchr/testify/mock"
)

// Scheduler is an autogenerated mock type for the Scheduler type
type Scheduler struct {
	mock.Mock
}

// NewSchedule provides a mock function with given fields: job, executionTime, payload
func (_m *Scheduler) NewSchedule(job schedule.Job, executionTime int64, payload interface{}) error {
	ret := _m.Called(job, executionTime, payload)

	if len(ret) == 0 {
		panic("no return value specified for NewSchedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(schedule.Job, int64, interface{}) error); ok {
		r0 = rf(job, executionTime, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewScheduler creates a new instance of Scheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Scheduler {
	mock := &Scheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
