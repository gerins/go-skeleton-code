// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Rest is an autogenerated mock type for the Rest type
type Rest struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, url, header, queryParams
func (_m *Rest) Delete(ctx context.Context, url string, header map[string]string, queryParams map[string]string) ([]byte, int, error) {
	ret := _m.Called(ctx, url, header, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 []byte
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, map[string]string) ([]byte, int, error)); ok {
		return rf(ctx, url, header, queryParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, map[string]string) []byte); ok {
		r0 = rf(ctx, url, header, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string, map[string]string) int); ok {
		r1 = rf(ctx, url, header, queryParams)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, map[string]string, map[string]string) error); ok {
		r2 = rf(ctx, url, header, queryParams)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: ctx, url, header, queryParams
func (_m *Rest) Get(ctx context.Context, url string, header map[string]string, queryParams map[string]string) ([]byte, int, error) {
	ret := _m.Called(ctx, url, header, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, map[string]string) ([]byte, int, error)); ok {
		return rf(ctx, url, header, queryParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, map[string]string) []byte); ok {
		r0 = rf(ctx, url, header, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string, map[string]string) int); ok {
		r1 = rf(ctx, url, header, queryParams)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, map[string]string, map[string]string) error); ok {
		r2 = rf(ctx, url, header, queryParams)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Post provides a mock function with given fields: ctx, url, header, payload
func (_m *Rest) Post(ctx context.Context, url string, header map[string]string, payload interface{}) ([]byte, int, error) {
	ret := _m.Called(ctx, url, header, payload)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 []byte
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, interface{}) ([]byte, int, error)); ok {
		return rf(ctx, url, header, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, interface{}) []byte); ok {
		r0 = rf(ctx, url, header, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string, interface{}) int); ok {
		r1 = rf(ctx, url, header, payload)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, map[string]string, interface{}) error); ok {
		r2 = rf(ctx, url, header, payload)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PostForm provides a mock function with given fields: ctx, url, header, payload
func (_m *Rest) PostForm(ctx context.Context, url string, header map[string]string, payload interface{}) ([]byte, int, error) {
	ret := _m.Called(ctx, url, header, payload)

	if len(ret) == 0 {
		panic("no return value specified for PostForm")
	}

	var r0 []byte
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, interface{}) ([]byte, int, error)); ok {
		return rf(ctx, url, header, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, interface{}) []byte); ok {
		r0 = rf(ctx, url, header, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string, interface{}) int); ok {
		r1 = rf(ctx, url, header, payload)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, map[string]string, interface{}) error); ok {
		r2 = rf(ctx, url, header, payload)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Put provides a mock function with given fields: ctx, url, header, payload
func (_m *Rest) Put(ctx context.Context, url string, header map[string]string, payload interface{}) ([]byte, int, error) {
	ret := _m.Called(ctx, url, header, payload)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 []byte
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, interface{}) ([]byte, int, error)); ok {
		return rf(ctx, url, header, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, interface{}) []byte); ok {
		r0 = rf(ctx, url, header, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string, interface{}) int); ok {
		r1 = rf(ctx, url, header, payload)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, map[string]string, interface{}) error); ok {
		r2 = rf(ctx, url, header, payload)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewRest creates a new instance of Rest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRest(t interface {
	mock.TestingT
	Cleanup(func())
}) *Rest {
	mock := &Rest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
